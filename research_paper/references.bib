@misc{CopyrightAct,
	title = {Intellectual {Property} {Act}, {No.36} of 2003},
	author = {{Parliament of the democratic socialist republic of Sri Lanka}}
}

@article{E.D.N.W.Senevirathna2018,
author = {{E.D.N.W. Senevirathna} and {K.L. Jayaratne}},
journal = {International Journal on Advances in ICT for Emerging Regions},
keywords = {audio fingerprint,broadcast monitoring,features extraction,generation,playlist,silence detection,wavelets},
title = {{Radio Broadcast Monitoring to Ensure Copyright Ownership}},
volume = {11},
year = {2018}
}

@inproceedings{Zhu2010,
author = {Zhu, Bilei and Li, Wei and Wang, Zhurong and Xue, Xiangyang},
booktitle = {MM'10 - Proceedings of the ACM Multimedia 2010 International Conference},
doi = {10.1145/1873951.1874130},
isbn = {9781605589336},
keywords = {audio fingerprinting,pitch shifting,robustness,time scale modification},
pages = {987--990},
title = {{A novel audio fingerprinting method robust to time scale modification and pitch shifting}},
year = {2010}
}

@incollection{Serra2010,
author = {Serr{\`{a}}, Joan and G{\'{o}}mez, Emilia and Herrera, Perfecto},
number = {1},
pages = {307--332},
title = {{Audio cover song identification and similarity: Background, approaches, evaluation, and beyond}},
booktitle = {{Studies in Computational Intelligence}},
isbn = {9783642116735},
volume = {274},
year = {2010}
}

@article{Kehtarnavaz2008,
author = {Kehtarnavaz, Nasser},
doi = {10.1016/b978-0-12-374490-6.00007-6},
journal = {Digital Signal Processing System Design},
pages = {175--196},
title = {{Frequency Domain Processing}},
volume = {1},
year = {2008}
}

@article{Lowe2004,
author = {Lowe, David G.},
doi = {10.1023/B:VISI.0000029664.99615.94},
issn = {09205691},
journal = {International Journal of Computer Vision},
keywords = {Image matching,Invariant features,Object recognition,Scale invariance},
number = {2},
pages = {91--110},
title = {{Distinctive image features from scale-invariant keypoints}},
volume = {60},
year = {2004}
}

@article{Ke2005,
author = {Ke, Yan and Hoiem, Derek and Sukthankar, Rahul},
doi = {10.1109/CVPR.2005.105},
isbn = {0769523722},
journal = {Proceedings - 2005 IEEE Computer Society Conference on Computer Vision and Pattern Recognition, CVPR 2005},
pages = {597--604},
title = {{Computer vision for music identification}},
volume = {I},
year = {2005}
}

@article{Cano2005,
author = {Cano, Pedro and Batlle, Eloi and Kalker, Ton and Haitsma, Jaap},
doi = {10.1007/s11265-005-4151-3},
issn = {13875485},
journal = {Journal of VLSI Signal Processing Systems for Signal, Image, and Video Technology},
keywords = {Audio fingerprinting,Audio information retrieval,Content-based audio identification,Integrity verification,Robust hashing,Watermarking},
number = {3 SPEC. ISS.},
pages = {271--284},
title = {{A review of audio fingerprinting}},
volume = {41},
year = {2005}
}

@article{Zhang2015,
author = {Zhang, Xiu and Zhu, Bilei and Li, Linwei and Li, Wei and Li, Xiaoqiang and Wang, Wei and Lu, Peizhong and Zhang, Wenqiang},
doi = {10.1186/s13636-015-0050-0},
journal = {EURASIP Journal on Audio, Speech, and Music Processing},
pages = {6},
title = {{SIFT-based local spectrogram image descriptor: a novel feature for robust music identification}},
volume = {2015},
year = {2015}
}

@techreport{Sears2006,
abstract = {Application designers must decide whether to store large objects (BLOBs) in a filesystem or in a database. Generally, this decision is based on factors such as application simplicity or manageability. Often, system performance affects these factors. Folklore tells us that databases efficiently handle large numbers of small objects, while filesystems are more efficient for large objects. Where is the break-even point? When is accessing a BLOB stored as a file cheaper than accessing a BLOB stored as a database record? The simple answer is: BLOBs smaller than 256KB are more efficiently handled by a database, while a filesystem is more efficient for those greater than 1MB. Of course, this will vary between different databases and filesystems. By measuring the performance of a storage server that mimics common workloads we found that the break-even point depends on many factors. However, our experiments suggest that storage age, the ratio of bytes in deleted objects to bytes in live objects, is dominant. As storage age increases, fragmentation tends to increase. The filesystem we study has better fragmentation control than the database we used, suggesting the database system would benefit from incorporating ideas from filesystem design. Conversely, filesystem performance may be improved by using database techniques to handle many small files. Surprisingly, for these studies, when average object size is held constant, the distribution of object sizes did not significantly affect performance. We also found that, in addition to low percentage free space, a low ratio of free space to average object size leads to fragmentation and performance degradation.},
author = {Sears, Russell and {Van Ingen}, Catharine and Gray, Jim},
title = {{To BLOB or Not To BLOB: Large Object Storage in a Database or a Filesystem?}},
year = {2006}
}

@techreport{Muja,
abstract = {For many computer vision problems, the most time consuming component consists of nearest neighbor matching in high-dimensional spaces. There are no known exact algorithms for solving these high-dimensional problems that are faster than linear search. Approximate algorithms are known to provide large speedups with only minor loss in accuracy, but many such algorithms have been published with only minimal guidance on selecting an algorithm and its parameters for any given problem. In this paper, we describe a system that answers the question, "What is the fastest approximate nearest-neighbor algorithm for my data?" Our system will take any given dataset and desired degree of precision and use these to automatically determine the best algorithm and parameter values. We also describe a new algorithm that applies priority search on hierarchical k-means trees, which we have found to provide the best known performance on many datasets. After testing a range of alternatives, we have found that multiple randomized k-d trees provide the best performance for other datasets. We are releasing public domain code that implements these approaches. This library provides about one order of magnitude improvement in query time over the best previously available software and provides fully automated parameter selection.},
author = {Muja, Marius and Lowe, David G},
title = {{FAST APPROXIMATE NEAREST NEIGHBORS WITH AUTOMATIC ALGORITHM CONFIGURATION}}
}

@inproceedings{query_by_humming,
address = {San Francisco, California, United States},
title = {Query by humming: musical information retrieval in an audio database},
isbn = {978-0-89791-751-3},
shorttitle = {Query by humming},
url = {http://portal.acm.org/citation.cfm?doid=217279.215273},
doi = {10.1145/217279.215273},
abstract = {The emergence of audio and video data types in databases will require new information retrieval methods adapted to the speciﬁc characteristics and needs of these data types. An effective and natural way of querying a musical audio database is by humming the tune of a song. In this paper, a system for querying an audio database by humming is described along with a scheme for representing the melodic information in a song as relative pitch changes. Relevant difﬁculties involved with tracking pitch are enumerated, along with the approach we followed, and the performance results of system indicating its effectiveness are presented.},
language = {en},
urldate = {2019-08-02},
booktitle = {Proceedings of the third {ACM} international conference on {Multimedia}  - {MULTIMEDIA} '95},
publisher = {ACM Press},
author = {Ghias, Asif and Logan, Jonathan and Chamberlin, David and Smith, Brian C.},
year = {1995},
pages = {231--236},
file = {Ghias et al. - 1995 - Query by humming musical information retrieval in.pdf:C\:\\Users\\pasin\\Zotero\\storage\\URGT34HU\\Ghias et al. - 1995 - Query by humming musical information retrieval in.pdf:application/pdf}
}

@article{comparative_query_by_humming,
	title = {A comparative evaluation of search techniques for query-by-humming using the {MUSART} testbed},
	volume = {58},
	issn = {15322882, 15322890},
	url = {http://doi.wiley.com/10.1002/asi.20532},
	doi = {10.1002/asi.20532},
	abstract = {Query-by-Humming systems offer content-based searching for melodies and require no special musical training or knowledge. Many such systems have been built, but there has not been much useful evaluation and comparison in the literature due to the lack of shared databases and queries. The MUSART project testbed allows various search algorithms to be compared using a shared framework that automatically runs experiments and summarizes results. Using this testbed, we compared algorithms based on string alignment, melodic contour matching, a hidden Markov model, n-grams, and CubyHum. Retrieval performance is very sensitive to distance functions and the representation of pitch and rhythm, which raises questions about some previously published conclusions. Some algorithms are particularly sensitive to the quality of queries. Our queries, which are taken from human subjects in a fairly realistic setting, are quite difficult, especially for n-gram models. Finally, simulations on query-byhumming performance as a function of database size indicate that retrieval performance falls only slowly as the database size increases.},
	language = {en},
	number = {5},
	urldate = {2019-08-02},
	journal = {Journal of the American Society for Information Science and Technology},
	author = {Dannenberg, Roger B. and Birmingham, William P. and Pardo, Bryan and Hu, Ning and Meek, Colin and Tzanetakis, George},
	month = mar,
	year = {2007},
	pages = {687--701},
}

@inproceedings{Chord,
title = {Audio-{Based} {Cover} {Song} {Retrieval} {Using} {Approximate} {Chord} {Sequences}: {Testing} {Shifts}, {Gaps}, {Swaps} and {Beats}.},
volume = {7},
shorttitle = {Audio-{Based} {Cover} {Song} {Retrieval} {Using} {Approximate} {Chord} {Sequences}},
booktitle = {{ISMIR}},
publisher = {Citeseer},
author = {Bello, Juan Pablo},
year = {2007},
pages = {239--244}
}

@article{PCP,
title = {Cover song identification with {IF}-{F}0 pitch class profiles},
journal = {MIREX extended abstract},
author = {Egorov, Alexey and Linetsky, Gene},
year = {2008}
}

@inproceedings{Energy,
title = {{ARTHUR}: {Retrieving} {Orchestral} {Music} by {Long}-{Term} {Structure}.},
shorttitle = {{ARTHUR}},
booktitle = {{ISMIR}},
author = {Foote, Jonathan},
year = {2000},
file = {Full Text:C\:\\Users\\pasin\\Zotero\\storage\\ITW74QZM\\Foote - 2000 - ARTHUR Retrieving Orchestral Music by Long-Term S.pdf:application/pdf}
}

@inproceedings{KeyTemplates,
	title = {Tonal {Similarity} from {Audio} {Using} a {Template} {Based} {Attractor} {Model}.},
	booktitle = {{ISMIR}},
	publisher = {Citeseer},
	author = {Özgür İzmirli},
	year = {2005},
	pages = {540--545}
}

@inproceedings{Melody,
title = {A {Mid}-level {Melody}-based {Representation} for {Calculating} {Audio} {Similarity}.},
booktitle = {{ISMIR}},
author = {Marolt, Matija},
year = {2006},
pages = {280--285}
}

@inproceedings{PBFV,
	title = {Fast music retrieval using polyphonic binary feature vectors},
	volume = {1},
	booktitle = {Proceedings. {IEEE} {International} {Conference} on {Multimedia} and {Expo}},
	publisher = {IEEE},
	author = {Nagano, Hidehisa and Kashino, Kunio and Murase, Hiroshi},
	year = {2002},
	pages = {101--104}
}















